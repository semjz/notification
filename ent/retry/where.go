// Code generated by ent, DO NOT EDIT.

package retry

import (
	"notification/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Retry {
	return predicate.Retry(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Retry {
	return predicate.Retry(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Retry {
	return predicate.Retry(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Retry {
	return predicate.Retry(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Retry {
	return predicate.Retry(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Retry {
	return predicate.Retry(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Retry {
	return predicate.Retry(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Retry {
	return predicate.Retry(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Retry {
	return predicate.Retry(sql.FieldLTE(FieldID, id))
}

// MessageUUID applies equality check predicate on the "message_uuid" field. It's identical to MessageUUIDEQ.
func MessageUUID(v uuid.UUID) predicate.Retry {
	return predicate.Retry(sql.FieldEQ(FieldMessageUUID, v))
}

// Attempts applies equality check predicate on the "attempts" field. It's identical to AttemptsEQ.
func Attempts(v int) predicate.Retry {
	return predicate.Retry(sql.FieldEQ(FieldAttempts, v))
}

// NextRetryAt applies equality check predicate on the "next_retry_at" field. It's identical to NextRetryAtEQ.
func NextRetryAt(v time.Time) predicate.Retry {
	return predicate.Retry(sql.FieldEQ(FieldNextRetryAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Retry {
	return predicate.Retry(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Retry {
	return predicate.Retry(sql.FieldEQ(FieldUpdatedAt, v))
}

// MessageUUIDEQ applies the EQ predicate on the "message_uuid" field.
func MessageUUIDEQ(v uuid.UUID) predicate.Retry {
	return predicate.Retry(sql.FieldEQ(FieldMessageUUID, v))
}

// MessageUUIDNEQ applies the NEQ predicate on the "message_uuid" field.
func MessageUUIDNEQ(v uuid.UUID) predicate.Retry {
	return predicate.Retry(sql.FieldNEQ(FieldMessageUUID, v))
}

// MessageUUIDIn applies the In predicate on the "message_uuid" field.
func MessageUUIDIn(vs ...uuid.UUID) predicate.Retry {
	return predicate.Retry(sql.FieldIn(FieldMessageUUID, vs...))
}

// MessageUUIDNotIn applies the NotIn predicate on the "message_uuid" field.
func MessageUUIDNotIn(vs ...uuid.UUID) predicate.Retry {
	return predicate.Retry(sql.FieldNotIn(FieldMessageUUID, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Retry {
	return predicate.Retry(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Retry {
	return predicate.Retry(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Retry {
	return predicate.Retry(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Retry {
	return predicate.Retry(sql.FieldNotIn(FieldStatus, vs...))
}

// AttemptsEQ applies the EQ predicate on the "attempts" field.
func AttemptsEQ(v int) predicate.Retry {
	return predicate.Retry(sql.FieldEQ(FieldAttempts, v))
}

// AttemptsNEQ applies the NEQ predicate on the "attempts" field.
func AttemptsNEQ(v int) predicate.Retry {
	return predicate.Retry(sql.FieldNEQ(FieldAttempts, v))
}

// AttemptsIn applies the In predicate on the "attempts" field.
func AttemptsIn(vs ...int) predicate.Retry {
	return predicate.Retry(sql.FieldIn(FieldAttempts, vs...))
}

// AttemptsNotIn applies the NotIn predicate on the "attempts" field.
func AttemptsNotIn(vs ...int) predicate.Retry {
	return predicate.Retry(sql.FieldNotIn(FieldAttempts, vs...))
}

// AttemptsGT applies the GT predicate on the "attempts" field.
func AttemptsGT(v int) predicate.Retry {
	return predicate.Retry(sql.FieldGT(FieldAttempts, v))
}

// AttemptsGTE applies the GTE predicate on the "attempts" field.
func AttemptsGTE(v int) predicate.Retry {
	return predicate.Retry(sql.FieldGTE(FieldAttempts, v))
}

// AttemptsLT applies the LT predicate on the "attempts" field.
func AttemptsLT(v int) predicate.Retry {
	return predicate.Retry(sql.FieldLT(FieldAttempts, v))
}

// AttemptsLTE applies the LTE predicate on the "attempts" field.
func AttemptsLTE(v int) predicate.Retry {
	return predicate.Retry(sql.FieldLTE(FieldAttempts, v))
}

// NextRetryAtEQ applies the EQ predicate on the "next_retry_at" field.
func NextRetryAtEQ(v time.Time) predicate.Retry {
	return predicate.Retry(sql.FieldEQ(FieldNextRetryAt, v))
}

// NextRetryAtNEQ applies the NEQ predicate on the "next_retry_at" field.
func NextRetryAtNEQ(v time.Time) predicate.Retry {
	return predicate.Retry(sql.FieldNEQ(FieldNextRetryAt, v))
}

// NextRetryAtIn applies the In predicate on the "next_retry_at" field.
func NextRetryAtIn(vs ...time.Time) predicate.Retry {
	return predicate.Retry(sql.FieldIn(FieldNextRetryAt, vs...))
}

// NextRetryAtNotIn applies the NotIn predicate on the "next_retry_at" field.
func NextRetryAtNotIn(vs ...time.Time) predicate.Retry {
	return predicate.Retry(sql.FieldNotIn(FieldNextRetryAt, vs...))
}

// NextRetryAtGT applies the GT predicate on the "next_retry_at" field.
func NextRetryAtGT(v time.Time) predicate.Retry {
	return predicate.Retry(sql.FieldGT(FieldNextRetryAt, v))
}

// NextRetryAtGTE applies the GTE predicate on the "next_retry_at" field.
func NextRetryAtGTE(v time.Time) predicate.Retry {
	return predicate.Retry(sql.FieldGTE(FieldNextRetryAt, v))
}

// NextRetryAtLT applies the LT predicate on the "next_retry_at" field.
func NextRetryAtLT(v time.Time) predicate.Retry {
	return predicate.Retry(sql.FieldLT(FieldNextRetryAt, v))
}

// NextRetryAtLTE applies the LTE predicate on the "next_retry_at" field.
func NextRetryAtLTE(v time.Time) predicate.Retry {
	return predicate.Retry(sql.FieldLTE(FieldNextRetryAt, v))
}

// NextRetryAtIsNil applies the IsNil predicate on the "next_retry_at" field.
func NextRetryAtIsNil() predicate.Retry {
	return predicate.Retry(sql.FieldIsNull(FieldNextRetryAt))
}

// NextRetryAtNotNil applies the NotNil predicate on the "next_retry_at" field.
func NextRetryAtNotNil() predicate.Retry {
	return predicate.Retry(sql.FieldNotNull(FieldNextRetryAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Retry {
	return predicate.Retry(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Retry {
	return predicate.Retry(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Retry {
	return predicate.Retry(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Retry {
	return predicate.Retry(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Retry {
	return predicate.Retry(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Retry {
	return predicate.Retry(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Retry {
	return predicate.Retry(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Retry {
	return predicate.Retry(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Retry {
	return predicate.Retry(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Retry {
	return predicate.Retry(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Retry {
	return predicate.Retry(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Retry {
	return predicate.Retry(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Retry {
	return predicate.Retry(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Retry {
	return predicate.Retry(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Retry {
	return predicate.Retry(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Retry {
	return predicate.Retry(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasMessage applies the HasEdge predicate on the "message" edge.
func HasMessage() predicate.Retry {
	return predicate.Retry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, MessageTable, MessageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMessageWith applies the HasEdge predicate on the "message" edge with a given conditions (other predicates).
func HasMessageWith(preds ...predicate.Message) predicate.Retry {
	return predicate.Retry(func(s *sql.Selector) {
		step := newMessageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Retry) predicate.Retry {
	return predicate.Retry(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Retry) predicate.Retry {
	return predicate.Retry(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Retry) predicate.Retry {
	return predicate.Retry(sql.NotPredicates(p))
}
