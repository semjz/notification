// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"notification/ent/message"
	"notification/ent/predicate"
	"notification/ent/retry"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// RetryUpdate is the builder for updating Retry entities.
type RetryUpdate struct {
	config
	hooks    []Hook
	mutation *RetryMutation
}

// Where appends a list predicates to the RetryUpdate builder.
func (ru *RetryUpdate) Where(ps ...predicate.Retry) *RetryUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetMessageUUID sets the "message_uuid" field.
func (ru *RetryUpdate) SetMessageUUID(u uuid.UUID) *RetryUpdate {
	ru.mutation.SetMessageUUID(u)
	return ru
}

// SetNillableMessageUUID sets the "message_uuid" field if the given value is not nil.
func (ru *RetryUpdate) SetNillableMessageUUID(u *uuid.UUID) *RetryUpdate {
	if u != nil {
		ru.SetMessageUUID(*u)
	}
	return ru
}

// SetStatus sets the "status" field.
func (ru *RetryUpdate) SetStatus(r retry.Status) *RetryUpdate {
	ru.mutation.SetStatus(r)
	return ru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ru *RetryUpdate) SetNillableStatus(r *retry.Status) *RetryUpdate {
	if r != nil {
		ru.SetStatus(*r)
	}
	return ru
}

// SetAttempts sets the "attempts" field.
func (ru *RetryUpdate) SetAttempts(i int) *RetryUpdate {
	ru.mutation.ResetAttempts()
	ru.mutation.SetAttempts(i)
	return ru
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (ru *RetryUpdate) SetNillableAttempts(i *int) *RetryUpdate {
	if i != nil {
		ru.SetAttempts(*i)
	}
	return ru
}

// AddAttempts adds i to the "attempts" field.
func (ru *RetryUpdate) AddAttempts(i int) *RetryUpdate {
	ru.mutation.AddAttempts(i)
	return ru
}

// SetNextRetryAt sets the "next_retry_at" field.
func (ru *RetryUpdate) SetNextRetryAt(t time.Time) *RetryUpdate {
	ru.mutation.SetNextRetryAt(t)
	return ru
}

// SetNillableNextRetryAt sets the "next_retry_at" field if the given value is not nil.
func (ru *RetryUpdate) SetNillableNextRetryAt(t *time.Time) *RetryUpdate {
	if t != nil {
		ru.SetNextRetryAt(*t)
	}
	return ru
}

// ClearNextRetryAt clears the value of the "next_retry_at" field.
func (ru *RetryUpdate) ClearNextRetryAt() *RetryUpdate {
	ru.mutation.ClearNextRetryAt()
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *RetryUpdate) SetCreatedAt(t time.Time) *RetryUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *RetryUpdate) SetNillableCreatedAt(t *time.Time) *RetryUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RetryUpdate) SetUpdatedAt(t time.Time) *RetryUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetMessageID sets the "message" edge to the Message entity by ID.
func (ru *RetryUpdate) SetMessageID(id uuid.UUID) *RetryUpdate {
	ru.mutation.SetMessageID(id)
	return ru
}

// SetMessage sets the "message" edge to the Message entity.
func (ru *RetryUpdate) SetMessage(m *Message) *RetryUpdate {
	return ru.SetMessageID(m.ID)
}

// Mutation returns the RetryMutation object of the builder.
func (ru *RetryUpdate) Mutation() *RetryMutation {
	return ru.mutation
}

// ClearMessage clears the "message" edge to the Message entity.
func (ru *RetryUpdate) ClearMessage() *RetryUpdate {
	ru.mutation.ClearMessage()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RetryUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RetryUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RetryUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RetryUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RetryUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := retry.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RetryUpdate) check() error {
	if v, ok := ru.mutation.Status(); ok {
		if err := retry.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Retry.status": %w`, err)}
		}
	}
	if ru.mutation.MessageCleared() && len(ru.mutation.MessageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Retry.message"`)
	}
	return nil
}

func (ru *RetryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(retry.Table, retry.Columns, sqlgraph.NewFieldSpec(retry.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.SetField(retry.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ru.mutation.Attempts(); ok {
		_spec.SetField(retry.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedAttempts(); ok {
		_spec.AddField(retry.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := ru.mutation.NextRetryAt(); ok {
		_spec.SetField(retry.FieldNextRetryAt, field.TypeTime, value)
	}
	if ru.mutation.NextRetryAtCleared() {
		_spec.ClearField(retry.FieldNextRetryAt, field.TypeTime)
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.SetField(retry.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(retry.FieldUpdatedAt, field.TypeTime, value)
	}
	if ru.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   retry.MessageTable,
			Columns: []string{retry.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   retry.MessageTable,
			Columns: []string{retry.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{retry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RetryUpdateOne is the builder for updating a single Retry entity.
type RetryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RetryMutation
}

// SetMessageUUID sets the "message_uuid" field.
func (ruo *RetryUpdateOne) SetMessageUUID(u uuid.UUID) *RetryUpdateOne {
	ruo.mutation.SetMessageUUID(u)
	return ruo
}

// SetNillableMessageUUID sets the "message_uuid" field if the given value is not nil.
func (ruo *RetryUpdateOne) SetNillableMessageUUID(u *uuid.UUID) *RetryUpdateOne {
	if u != nil {
		ruo.SetMessageUUID(*u)
	}
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *RetryUpdateOne) SetStatus(r retry.Status) *RetryUpdateOne {
	ruo.mutation.SetStatus(r)
	return ruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruo *RetryUpdateOne) SetNillableStatus(r *retry.Status) *RetryUpdateOne {
	if r != nil {
		ruo.SetStatus(*r)
	}
	return ruo
}

// SetAttempts sets the "attempts" field.
func (ruo *RetryUpdateOne) SetAttempts(i int) *RetryUpdateOne {
	ruo.mutation.ResetAttempts()
	ruo.mutation.SetAttempts(i)
	return ruo
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (ruo *RetryUpdateOne) SetNillableAttempts(i *int) *RetryUpdateOne {
	if i != nil {
		ruo.SetAttempts(*i)
	}
	return ruo
}

// AddAttempts adds i to the "attempts" field.
func (ruo *RetryUpdateOne) AddAttempts(i int) *RetryUpdateOne {
	ruo.mutation.AddAttempts(i)
	return ruo
}

// SetNextRetryAt sets the "next_retry_at" field.
func (ruo *RetryUpdateOne) SetNextRetryAt(t time.Time) *RetryUpdateOne {
	ruo.mutation.SetNextRetryAt(t)
	return ruo
}

// SetNillableNextRetryAt sets the "next_retry_at" field if the given value is not nil.
func (ruo *RetryUpdateOne) SetNillableNextRetryAt(t *time.Time) *RetryUpdateOne {
	if t != nil {
		ruo.SetNextRetryAt(*t)
	}
	return ruo
}

// ClearNextRetryAt clears the value of the "next_retry_at" field.
func (ruo *RetryUpdateOne) ClearNextRetryAt() *RetryUpdateOne {
	ruo.mutation.ClearNextRetryAt()
	return ruo
}

// SetCreatedAt sets the "created_at" field.
func (ruo *RetryUpdateOne) SetCreatedAt(t time.Time) *RetryUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *RetryUpdateOne) SetNillableCreatedAt(t *time.Time) *RetryUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RetryUpdateOne) SetUpdatedAt(t time.Time) *RetryUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetMessageID sets the "message" edge to the Message entity by ID.
func (ruo *RetryUpdateOne) SetMessageID(id uuid.UUID) *RetryUpdateOne {
	ruo.mutation.SetMessageID(id)
	return ruo
}

// SetMessage sets the "message" edge to the Message entity.
func (ruo *RetryUpdateOne) SetMessage(m *Message) *RetryUpdateOne {
	return ruo.SetMessageID(m.ID)
}

// Mutation returns the RetryMutation object of the builder.
func (ruo *RetryUpdateOne) Mutation() *RetryMutation {
	return ruo.mutation
}

// ClearMessage clears the "message" edge to the Message entity.
func (ruo *RetryUpdateOne) ClearMessage() *RetryUpdateOne {
	ruo.mutation.ClearMessage()
	return ruo
}

// Where appends a list predicates to the RetryUpdate builder.
func (ruo *RetryUpdateOne) Where(ps ...predicate.Retry) *RetryUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RetryUpdateOne) Select(field string, fields ...string) *RetryUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Retry entity.
func (ruo *RetryUpdateOne) Save(ctx context.Context) (*Retry, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RetryUpdateOne) SaveX(ctx context.Context) *Retry {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RetryUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RetryUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RetryUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := retry.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RetryUpdateOne) check() error {
	if v, ok := ruo.mutation.Status(); ok {
		if err := retry.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Retry.status": %w`, err)}
		}
	}
	if ruo.mutation.MessageCleared() && len(ruo.mutation.MessageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Retry.message"`)
	}
	return nil
}

func (ruo *RetryUpdateOne) sqlSave(ctx context.Context) (_node *Retry, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(retry.Table, retry.Columns, sqlgraph.NewFieldSpec(retry.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Retry.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, retry.FieldID)
		for _, f := range fields {
			if !retry.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != retry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.SetField(retry.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ruo.mutation.Attempts(); ok {
		_spec.SetField(retry.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedAttempts(); ok {
		_spec.AddField(retry.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.NextRetryAt(); ok {
		_spec.SetField(retry.FieldNextRetryAt, field.TypeTime, value)
	}
	if ruo.mutation.NextRetryAtCleared() {
		_spec.ClearField(retry.FieldNextRetryAt, field.TypeTime)
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.SetField(retry.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(retry.FieldUpdatedAt, field.TypeTime, value)
	}
	if ruo.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   retry.MessageTable,
			Columns: []string{retry.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   retry.MessageTable,
			Columns: []string{retry.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Retry{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{retry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
