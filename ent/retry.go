// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"notification/ent/message"
	"notification/ent/retry"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Retry is the model entity for the Retry schema.
type Retry struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MessageUUID holds the value of the "message_uuid" field.
	MessageUUID uuid.UUID `json:"message_uuid,omitempty"`
	// Status holds the value of the "status" field.
	Status retry.Status `json:"status,omitempty"`
	// Attempts holds the value of the "attempts" field.
	Attempts int `json:"attempts,omitempty"`
	// NextRetryAt holds the value of the "next_retry_at" field.
	NextRetryAt *time.Time `json:"next_retry_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RetryQuery when eager-loading is set.
	Edges        RetryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RetryEdges holds the relations/edges for other nodes in the graph.
type RetryEdges struct {
	// Message holds the value of the message edge.
	Message *Message `json:"message,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MessageOrErr returns the Message value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RetryEdges) MessageOrErr() (*Message, error) {
	if e.Message != nil {
		return e.Message, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: message.Label}
	}
	return nil, &NotLoadedError{edge: "message"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Retry) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case retry.FieldID, retry.FieldAttempts:
			values[i] = new(sql.NullInt64)
		case retry.FieldStatus:
			values[i] = new(sql.NullString)
		case retry.FieldNextRetryAt, retry.FieldCreatedAt, retry.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case retry.FieldMessageUUID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Retry fields.
func (r *Retry) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case retry.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case retry.FieldMessageUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field message_uuid", values[i])
			} else if value != nil {
				r.MessageUUID = *value
			}
		case retry.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				r.Status = retry.Status(value.String)
			}
		case retry.FieldAttempts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attempts", values[i])
			} else if value.Valid {
				r.Attempts = int(value.Int64)
			}
		case retry.FieldNextRetryAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field next_retry_at", values[i])
			} else if value.Valid {
				r.NextRetryAt = new(time.Time)
				*r.NextRetryAt = value.Time
			}
		case retry.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case retry.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Retry.
// This includes values selected through modifiers, order, etc.
func (r *Retry) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryMessage queries the "message" edge of the Retry entity.
func (r *Retry) QueryMessage() *MessageQuery {
	return NewRetryClient(r.config).QueryMessage(r)
}

// Update returns a builder for updating this Retry.
// Note that you need to call Retry.Unwrap() before calling this method if this Retry
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Retry) Update() *RetryUpdateOne {
	return NewRetryClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Retry entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Retry) Unwrap() *Retry {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Retry is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Retry) String() string {
	var builder strings.Builder
	builder.WriteString("Retry(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("message_uuid=")
	builder.WriteString(fmt.Sprintf("%v", r.MessageUUID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", r.Status))
	builder.WriteString(", ")
	builder.WriteString("attempts=")
	builder.WriteString(fmt.Sprintf("%v", r.Attempts))
	builder.WriteString(", ")
	if v := r.NextRetryAt; v != nil {
		builder.WriteString("next_retry_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Retries is a parsable slice of Retry.
type Retries []*Retry
